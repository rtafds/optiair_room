/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  6
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      createBafflesDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// Whether to convert internal faces only (so leave boundary faces intact).
// This is only relevant if your face selection type can pick up boundary
// faces.
internalFacesOnly true;

fields true;

// Baffles to create.
baffles
{
    Table
    {
        //- Select faces and orientation through a searchableSurface
        type        searchableSurface;
        surface     searchablePlate;
        // (4.599 0.749 -0.001) (7.001 0.751 0.101)
        origin      (4.8 0.64 0);
        span        (1.8 0 0.1);
        
        //- Use predefined faceZone to select faces and orientation.
        // type        faceZone;
        // zoneName    Table;

        patchPairs
        {
            type            wall;

            patchFields
            {
                alphat
                {
                    type            compressible::alphatWallFunction;
                    value           uniform 0;
                }
                epsilon
                {
                    type            epsilonWallFunction;
                    Cmu             0.09;
                    kappa           0.41;
                    E               9.8;
                    value           uniform 0;
                }
                G
                {
                    type            greyDiffusiveRadiation;
                    value           uniform 0;
                    emissivityMode  lookup;
                    emissivity      uniform 0.9;
                }
                IDefault
                {
                    type            greyDiffusiveRadiation;
                    emissivityMode  lookup;
                    emissivity      uniform 0.9;
                    value           uniform 0;
                }
                k
                {
                    type            kqRWallFunction;
                    value           uniform 0.1;
                }
                nut
                {
                    type            nutkWallFunction;
                    Cmu             0.09;
                    kappa           0.41;
                    E               9.8;
                    value           uniform 0;
                }
                p
                {
                    type            zeroGradient;
                }
                p_rgh
                {
                    type            zeroGradient;
                }
                T
                {
                    type            zeroGradient;
                }
                U
                {
                    type            noSlip;
                }
            }
        }
    }


    /*
    cyclicFaces
    {
        //- Select faces and orientation through a searchableSurface
        type        searchableSurface;
        surface     searchablePlate;
        origin      (0.099 -0.006 0.004);
        span        (0 0.012 0.012);

        patchPairs
        {
            type            cyclic;

            //- Optional override of added patchfields. If not specified
            //  any added patchfields are of type calculated.
            patchFields
            {
                p
                {
                    type            fan;
                    patchType       cyclic;
                    jump            uniform 0;
                    value           uniform 0;
                    jumpTable       polynomial 1((100 0));
                }
            }
        }
    }
    */
}


// ************************************************************************* //
